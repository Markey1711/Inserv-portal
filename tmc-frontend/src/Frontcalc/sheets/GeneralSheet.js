import React, { useState, useEffect } from "react";

// GeneralSheet ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
// –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä–æ–≥–æ PATCH –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

export default function GeneralSheet({ data, onChange }) {
  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å props.data
  const [localData, setLocalData] = useState(data || {});
  const [objectNameEditable, setObjectNameEditable] = useState(!data?.objectName);
  const [saved, setSaved] = useState(!!data?.objectCode);

  useEffect(() => {
    setLocalData(data || {});
    setSaved(!!(data && data.objectCode));
    setObjectNameEditable(!(data && data.objectName));
  }, [data]);

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  function handleSaveClick() {
    if (!localData.objectCode && localData.objectName?.trim()) {
      if (onChange) onChange(localData);
      setSaved(true);
      setObjectNameEditable(false);
    }
  }

  function handleNameChange(e) {
    setLocalData({ ...localData, objectName: e.target.value });
  }
  function handleNameBlur() {
    setObjectNameEditable(false);
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  function handleFieldChange(field, value) {
    const nextData = { ...localData, [field]: value };
    setLocalData(nextData);
    if (localData.objectCode && onChange) onChange(nextData);
  }

  // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–æ—â–∞–¥–µ–π
  const areaRows = localData.areaTable || [];
  function handleAreaChange(idx, field, value) {
    const newRows = areaRows.map((row, i) =>
      i === idx ? { ...row, [field]: value } : row
    );
    const nextData = { ...localData, areaTable: newRows };
    setLocalData(nextData);
    if (localData.objectCode && onChange) onChange(nextData);
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚Äî —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç
  function handleAddAreaRow() {
    // –î–µ–ª–∞–µ–º optimistic update: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
    const nextRows = [...areaRows, { territory: "", area: "" }];
    setLocalData({ ...localData, areaTable: nextRows });

    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É
    if (localData.objectCode && onChange) {
      // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É!
      onChange({ ...localData, areaTable: nextRows });
    }
  }

  function handleRemoveAreaRow(idx) {
    const newRows = areaRows.filter((_, i) => i !== idx);
    const nextData = { ...localData, areaTable: newRows };
    setLocalData(nextData);
    if (localData.objectCode && onChange) onChange(nextData);
  }

  const totalArea = areaRows.reduce((sum, row) => sum + (Number(row.area) || 0), 0);

  if (!localData) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div>
      <div style={{
        fontWeight: "bold",
        fontSize: "1.2rem",
        textAlign: "center",
        marginBottom: 16
      }}>
        {objectNameEditable || !localData.objectName ? (
          <input
            type="text"
            value={localData.objectName || ""}
            onChange={handleNameChange}
            onBlur={handleNameBlur}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"
            style={{
              fontSize: "1.2rem",
              padding: "8px 20px",
              marginBottom: 6,
              borderRadius: 5,
              border: "1px solid #ccc",
              width: "70%",
              textAlign: "center"
            }}
          />
        ) : (
          <span>{localData.objectName}</span>
        )}
        {!saved && (
          <button
            onClick={handleSaveClick}
            style={{
              marginLeft: 18,
              fontSize: "1rem",
              padding: "6px 18px",
              borderRadius: 5,
              background: "#e7f6d4",
              border: "1px solid #8bc34a",
              cursor: "pointer"
            }}
            disabled={!localData.objectName || !localData.objectName.trim()}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        )}
      </div>
      <div style={{ marginBottom: 11, display: "flex", alignItems: "center", gap: "12px" }}>
        <label style={{ width: 110, textAlign: "right", fontWeight: 500 }}>–ó–∞–∫–∞–∑—á–∏–∫:</label>
        <input
          type="text"
          value={localData.company || ""}
          onChange={e => handleFieldChange("company", e.target.value)}
          disabled={!saved}
          style={inputStyle}
        />
      </div>
      <div style={{ marginBottom: 11, display: "flex", alignItems: "center", gap: "12px" }}>
        <label style={{ width: 110, textAlign: "right", fontWeight: 500 }}>–ê–¥—Ä–µ—Å:</label>
        <input
          type="text"
          value={localData.address || ""}
          onChange={e => handleFieldChange("address", e.target.value)}
          disabled={!saved}
          style={inputStyle}
        />
      </div>
      <div style={{ marginBottom: 20 }}>
        <div style={{ fontWeight: "bold", fontSize: "1rem", marginBottom: 8 }}>
          –ü–ª–æ—â–∞–¥—å
        </div>
        <table style={{ borderCollapse: "collapse", width: "100%", background: "#fafcff" }}>
          <thead>
            <tr style={{ background: "#f5f5f5" }}>
              <th style={tableThStyle}>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è</th>
              <th style={tableThStyle}>–ü–ª–æ—â–∞–¥—å, –º.–∫–≤.</th>
              <th style={tableThStyle}></th>
            </tr>
          </thead>
          <tbody>
            {areaRows.map((row, idx) => (
              <tr key={idx}>
                <td style={tableTdStyle}>
                  <input
                    value={row.territory}
                    onChange={e => handleAreaChange(idx, "territory", e.target.value)}
                    disabled={!saved}
                    style={{ width: "100%", padding: "4px", ...inputStyle }}
                  />
                </td>
                <td style={tableTdStyle}>
                  <input
                    value={row.area}
                    onChange={e => handleAreaChange(idx, "area", e.target.value)}
                    disabled={!saved}
                    style={{ width: "100%", padding: "4px", ...inputStyle }}
                  />
                </td>
                <td style={tableTdStyle}>
                  <button
                    onClick={() => handleRemoveAreaRow(idx)}
                    disabled={!saved}
                    style={{ background: "#fff0f0", border: "1px solid #ccc", borderRadius: 4, cursor: "pointer", padding: "0 8px" }}
                  >üóëÔ∏è</button>
                </td>
              </tr>
            ))}
            <tr>
              <td style={{ textAlign: "right", fontWeight: "bold" }}>–ò—Ç–æ–≥–æ:</td>
              <td style={{ fontWeight: "bold" }}>{totalArea}</td>
              <td></td>
            </tr>
            <tr>
              <td colSpan={3} style={{ textAlign: "right", padding: "8px 0" }}>
                <button
                  onClick={handleAddAreaRow}
                  disabled={!saved}
                  style={{
                    background: "#e7f6d4",
                    border: "1px solid #8bc34a",
                    borderRadius: 4,
                    cursor: "pointer",
                    padding: "6px 22px",
                    fontWeight: "bold",
                    fontSize: "1rem"
                  }}
                >‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É</button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div style={{ marginBottom: 11, display: "flex", alignItems: "center", gap: "12px" }}>
        <label style={{ width: 110, textAlign: "right", fontWeight: 500 }}>–ù–∞—à–µ —é—Ä.–ª–∏—Ü–æ:</label>
        <input
          type="text"
          value={localData.customer || ""}
          onChange={e => handleFieldChange("customer", e.target.value)}
          disabled={!saved}
          style={inputStyle}
        />
      </div>
      <div style={{ marginBottom: 5, display: "flex", alignItems: "center", gap: "12px" }}>
        <label style={{ width: 110, textAlign: "right", fontWeight: 500 }}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
        <input
          type="text"
          value={localData.comment || ""}
          onChange={e => handleFieldChange("comment", e.target.value)}
          disabled={!saved}
          style={inputStyle}
        />
      </div>
    </div>
  );
}

const inputStyle = {
  padding: "5px 12px",
  borderRadius: 4,
  border: "1px solid #ccc",
  fontSize: "1rem",
  background: "#fff"
};

const tableThStyle = {
  padding: "8px 6px",
  border: "1px solid #ddd",
  background: "#fafafa",
  fontWeight: "bold",
  textAlign: "center",
  fontSize: "1rem"
};

const tableTdStyle = {
  padding: "4px 8px",
  border: "1px solid #eee",
  textAlign: "center"
};